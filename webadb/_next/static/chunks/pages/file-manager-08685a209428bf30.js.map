{"version":3,"file":"static/chunks/pages/file-manager-08685a209428bf30.js","mappings":"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","sources":["webpack://_N_E/?10f5","webpack://_N_E/./src/pages/file-manager.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/file-manager\",\n      function () {\n        return require(\"private-next-pages/file-manager.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/file-manager\"])\n      });\n    }\n  ","import {\n    Breadcrumb,\n    ContextualMenu,\n    ContextualMenuItem,\n    DetailsListLayoutMode,\n    Dialog,\n    DirectionalHint,\n    IBreadcrumbItem,\n    IColumn,\n    IContextualMenuItem,\n    IDetailsHeaderProps,\n    IRenderFunction,\n    Icon,\n    Layer,\n    MarqueeSelection,\n    Overlay,\n    ProgressIndicator,\n    Selection,\n    ShimmeredDetailsList,\n    Stack,\n    StackItem,\n    concatStyleSets,\n    mergeStyleSets,\n} from \"@fluentui/react\";\nimport {\n    FileIconType,\n    getFileTypeIconProps,\n    initializeFileTypeIcons,\n} from \"@fluentui/react-file-type-icons\";\nimport { useConst } from \"@fluentui/react-hooks\";\nimport { getIcon } from \"@fluentui/style-utilities\";\nimport {\n    ADB_SYNC_MAX_PACKET_SIZE,\n    AdbFeatures,\n    LinuxFileType,\n    type AdbSyncEntry,\n} from \"@yume-chan/adb\";\nimport { ChunkStream } from \"@yume-chan/stream-extra\";\nimport {\n    action,\n    autorun,\n    makeAutoObservable,\n    observable,\n    runInAction,\n} from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Router, { useRouter } from \"next/router\";\nimport path from \"path\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { CommandBar, NoSsr } from \"../components\";\nimport { GLOBAL_STATE } from \"../state\";\nimport {\n    Icons,\n    ProgressStream,\n    RouteStackProps,\n    asyncEffect,\n    createFileStream,\n    formatSize,\n    formatSpeed,\n    pickFile,\n    saveFile,\n} from \"../utils\";\n\ninitializeFileTypeIcons();\n\ninterface ListItem extends AdbSyncEntry {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntry): ListItem {\n    (item as ListItem).key = item.name;\n    return item as ListItem;\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: \"pointer\",\n        \"&:hover\": {\n            textDecoration: \"underline\",\n        },\n    },\n});\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (\n    props?,\n    defaultRender?\n) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } }),\n    });\n};\n\nfunction compareCaseInsensitively(a: string, b: string) {\n    let result = a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase());\n    if (result !== 0) {\n        return result;\n    } else {\n        return a.localeCompare(b);\n    }\n}\n\nclass FileManagerState {\n    initial = true;\n    visible = false;\n    path = \"/\";\n    loading = false;\n    items: ListItem[] = [];\n    sortKey: keyof ListItem = \"name\";\n    sortDescending = false;\n\n    uploading = false;\n    uploadPath: string | undefined = undefined;\n    uploadedSize = 0;\n    uploadTotalSize = 0;\n    debouncedUploadedSize = 0;\n    uploadSpeed = 0;\n\n    selectedItems: ListItem[] = [];\n    contextMenuTarget: MouseEvent | undefined = undefined;\n\n    get breadcrumbItems(): IBreadcrumbItem[] {\n        let part = \"\";\n        const list: IBreadcrumbItem[] = this.path\n            .split(\"/\")\n            .filter(Boolean)\n            .map((segment) => {\n                part += \"/\" + segment;\n                return {\n                    key: part,\n                    text: segment,\n                    onClick: (e, item) => {\n                        if (!item) {\n                            return;\n                        }\n                        this.pushPathQuery(item.key);\n                    },\n                };\n            });\n        list.unshift({\n            key: \"/\",\n            text: \"Device\",\n            onClick: () => this.pushPathQuery(\"/\"),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        delete list[list.length - 1].onClick;\n        return list;\n    }\n\n    get menuItems() {\n        let result: IContextualMenuItem[] = [];\n\n        switch (this.selectedItems.length) {\n            case 0:\n                result.push({\n                    key: \"upload\",\n                    text: \"Upload\",\n                    iconProps: {\n                        iconName: Icons.CloudArrowUp,\n                        style: { height: 20, fontSize: 20, lineHeight: 1.5 },\n                    },\n                    disabled: !GLOBAL_STATE.device,\n                    onClick: () => {\n                        (async () => {\n                            const files = await pickFile({ multiple: true });\n                            for (let i = 0; i < files.length; i++) {\n                                const file = files.item(i)!;\n                                await this.upload(file);\n                            }\n                        })();\n\n                        return false;\n                    },\n                });\n                break;\n            case 1:\n                if (this.selectedItems[0].type === LinuxFileType.File) {\n                    result.push({\n                        key: \"download\",\n                        text: \"Download\",\n                        iconProps: {\n                            iconName: Icons.CloudArrowDown,\n                            style: {\n                                height: 20,\n                                fontSize: 20,\n                                lineHeight: 1.5,\n                            },\n                        },\n                        onClick: () => {\n                            (async () => {\n                                const sync = await GLOBAL_STATE.device!.sync();\n                                try {\n                                    const item = this.selectedItems[0];\n                                    const itemPath = path.resolve(\n                                        this.path,\n                                        item.name\n                                    );\n                                    await sync\n                                        .read(itemPath)\n                                        .pipeTo(\n                                            saveFile(\n                                                item.name,\n                                                Number(item.size)\n                                            )\n                                        );\n                                } catch (e: any) {\n                                    GLOBAL_STATE.showErrorDialog(e);\n                                } finally {\n                                    sync.dispose();\n                                }\n                            })();\n                            return false;\n                        },\n                    });\n                }\n            // fall through\n            default:\n                result.push({\n                    key: \"delete\",\n                    text: \"Delete\",\n                    iconProps: {\n                        iconName: Icons.Delete,\n                        style: { height: 20, fontSize: 20, lineHeight: 1.5 },\n                    },\n                    onClick: () => {\n                        (async () => {\n                            try {\n                                for (const item of this.selectedItems) {\n                                    const output =\n                                        await GLOBAL_STATE.device!.rm(\n                                            path.resolve(this.path, item.name!)\n                                        );\n                                    if (output) {\n                                        GLOBAL_STATE.showErrorDialog(output);\n                                        return;\n                                    }\n                                }\n                            } catch (e: any) {\n                                GLOBAL_STATE.showErrorDialog(e);\n                            } finally {\n                                this.loadFiles();\n                            }\n                        })();\n                        return false;\n                    },\n                });\n                break;\n        }\n\n        return result;\n    }\n\n    get sortedList() {\n        const list = this.items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[this.sortKey]!;\n                const bSortKey = b[this.sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    result = compareCaseInsensitively(a.name!, b.name!);\n                } else if (typeof aSortKey === \"string\") {\n                    result = compareCaseInsensitively(\n                        aSortKey,\n                        bSortKey as string\n                    );\n                } else {\n                    result = aSortKey < bSortKey ? -1 : 1;\n                }\n            }\n\n            if (this.sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        return list;\n    }\n\n    get columns(): IColumn[] {\n        const ICON_SIZE = 20;\n\n        const list: IColumn[] = [\n            {\n                key: \"type\",\n                name: \"File Type\",\n                iconName: Icons.Document20,\n                isIconOnly: true,\n                minWidth: ICON_SIZE,\n                maxWidth: ICON_SIZE,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    let iconName: string;\n\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            // larger sizes of `linkedFolder` icon now have a person symbol on it,\n                            // We want to use it for symbolic links, so use the 16px version\n                            // cspell:disable-next-line\n                            iconName = \"linkedfolder16_svg\";\n                            break;\n                        case LinuxFileType.Directory:\n                            ({ iconName } = getFileTypeIconProps({\n                                type: FileIconType.folder,\n                            }));\n                            break;\n                        case LinuxFileType.File:\n                            ({ iconName } = getFileTypeIconProps({\n                                extension: path.extname(item.name!),\n                            }));\n                            break;\n                        default:\n                            ({ iconName } = getFileTypeIconProps({\n                                type: FileIconType.genericFile,\n                            }));\n                            break;\n                    }\n\n                    // `@fluentui/react-file-type-icons` doesn't export icon src.\n                    const iconSrc = (\n                        getIcon(iconName)!.code as unknown as JSX.Element\n                    ).props.src;\n                    return (\n                        <Icon\n                            imageProps={{\n                                crossOrigin: \"anonymous\",\n                                src: iconSrc,\n                            }}\n                            style={{ width: ICON_SIZE, height: ICON_SIZE }}\n                        />\n                    );\n                },\n            },\n            {\n                key: \"name\",\n                name: \"Name\",\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntry) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                },\n            },\n            {\n                key: \"permission\",\n                name: \"Permission\",\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    return `${((item.mode >> 6) & 0b100).toString(8)}${(\n                        (item.mode >> 3) &\n                        0b100\n                    ).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                },\n            },\n            {\n                key: \"size\",\n                name: \"Size\",\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(Number(item.size));\n                    }\n                    return \"\";\n                },\n            },\n            {\n                key: \"mtime\",\n                name: \"Last Modified Time\",\n                minWidth: 150,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    return new Date(Number(item.mtime) * 1000).toLocaleString();\n                },\n            },\n        ];\n\n        if (GLOBAL_STATE.device?.features?.includes(AdbFeatures.ListV2)) {\n            list.push(\n                {\n                    key: \"ctime\",\n                    name: \"Creation Time\",\n                    minWidth: 150,\n                    isCollapsible: true,\n                    onRender(item: AdbSyncEntry) {\n                        return new Date(\n                            Number(item.ctime!) * 1000\n                        ).toLocaleString();\n                    },\n                },\n                {\n                    key: \"atime\",\n                    name: \"Last Access Time\",\n                    minWidth: 150,\n                    isCollapsible: true,\n                    onRender(item: AdbSyncEntry) {\n                        return new Date(\n                            Number(item.atime!) * 1000\n                        ).toLocaleString();\n                    },\n                }\n            );\n        }\n\n        for (const item of list) {\n            item.onColumnClick = (e, column) => {\n                if (this.sortKey === column.key) {\n                    runInAction(\n                        () => (this.sortDescending = !this.sortDescending)\n                    );\n                } else {\n                    runInAction(() => {\n                        this.sortKey = column.key as keyof ListItem;\n                        this.sortDescending = false;\n                    });\n                }\n            };\n\n            if (item.key === this.sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = this.sortDescending;\n            }\n        }\n\n        return list;\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            items: observable.shallow,\n            pushPathQuery: false,\n            changeDirectory: action.bound,\n            loadFiles: false,\n        });\n\n        autorun(() => {\n            if (GLOBAL_STATE.device) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.loadFiles();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    pushPathQuery = (path: string) => {\n        Router.push({ query: { ...Router.query, path } });\n    };\n\n    changeDirectory(path: string) {\n        if (this.path === path) {\n            return;\n        }\n\n        this.path = path;\n\n        if (!GLOBAL_STATE.device) {\n            return;\n        }\n\n        this.loadFiles();\n    }\n\n    loadFiles = asyncEffect(async (signal) => {\n        const currentPath = this.path;\n\n        runInAction(() => (this.items = []));\n\n        if (!GLOBAL_STATE.device) {\n            return;\n        }\n\n        runInAction(() => (this.loading = true));\n\n        const sync = await GLOBAL_STATE.device.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntry[] = [];\n        const intervalId = setInterval(() => {\n            if (signal.aborted) {\n                return;\n            }\n\n            runInAction(() => (this.items = items.slice()));\n        }, 1000);\n\n        try {\n            for await (const entry of sync.opendir(currentPath)) {\n                if (signal.aborted) {\n                    return;\n                }\n\n                if (entry.name === \".\" || entry.name === \"..\") {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n            }\n\n            for (const entry of linkItems) {\n                if (signal.aborted) {\n                    return;\n                }\n\n                if (\n                    !(await sync.isDirectory(\n                        path.resolve(currentPath, entry.name!)\n                    ))\n                ) {\n                    entry.mode = (LinuxFileType.File << 12) | entry.permission;\n                    entry.size = 0n;\n                }\n\n                items.push(toListItem(entry));\n            }\n\n            if (signal.aborted) {\n                return;\n            }\n\n            runInAction(() => (this.items = items));\n        } finally {\n            if (!signal.aborted) {\n                runInAction(() => (this.loading = false));\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    });\n\n    upload = async (file: File) => {\n        const sync = await GLOBAL_STATE.device!.sync();\n        try {\n            const itemPath = path.resolve(this.path!, file.name);\n            runInAction(() => {\n                this.uploading = true;\n                this.uploadPath = file.name;\n                this.uploadedSize = 0;\n                this.uploadTotalSize = file.size;\n                this.debouncedUploadedSize = 0;\n                this.uploadSpeed = 0;\n            });\n\n            const intervalId = setInterval(\n                action(() => {\n                    this.uploadSpeed =\n                        this.uploadedSize - this.debouncedUploadedSize;\n                    this.debouncedUploadedSize = this.uploadedSize;\n                }),\n                1000\n            );\n\n            try {\n                await createFileStream(file)\n                    .pipeThrough(new ChunkStream(ADB_SYNC_MAX_PACKET_SIZE))\n                    .pipeThrough(\n                        new ProgressStream(\n                            action((uploaded) => {\n                                this.uploadedSize = uploaded;\n                            })\n                        )\n                    )\n                    .pipeTo(\n                        sync.write(\n                            itemPath,\n                            (LinuxFileType.File << 12) | 0o666,\n                            file.lastModified / 1000\n                        )\n                    );\n\n                runInAction(() => {\n                    this.uploadSpeed =\n                        this.uploadedSize - this.debouncedUploadedSize;\n                    this.debouncedUploadedSize = this.uploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n        } catch (e: any) {\n            GLOBAL_STATE.showErrorDialog(e);\n        } finally {\n            sync.dispose();\n            this.loadFiles();\n            runInAction(() => {\n                this.uploading = false;\n            });\n        }\n    };\n}\n\nconst state = new FileManagerState();\n\nconst UploadDialog = observer(() => {\n    return (\n        <Dialog\n            hidden={!state.uploading}\n            dialogContentProps={{\n                title: \"Uploading...\",\n                subText: state.uploadPath,\n            }}\n        >\n            <ProgressIndicator\n                description={formatSpeed(\n                    state.debouncedUploadedSize,\n                    state.uploadTotalSize,\n                    state.uploadSpeed\n                )}\n                percentComplete={state.uploadedSize / state.uploadTotalSize}\n            />\n        </Dialog>\n    );\n});\n\nconst FileManager: NextPage = (): JSX.Element | null => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    });\n\n    const router = useRouter();\n    useEffect(() => {\n        let pathQuery = router.query.path;\n        if (!pathQuery) {\n            router.replace({ query: { ...router.query, path: state.path } });\n            return;\n        }\n\n        if (Array.isArray(pathQuery)) {\n            pathQuery = pathQuery[0];\n        }\n\n        state.changeDirectory(pathQuery);\n    }, [router]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await GLOBAL_STATE.device!.sync();\n        try {\n            const readable = sync.read(path);\n            // @ts-ignore ReadableStream definitions are slightly incompatible\n            const response = new Response(readable);\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, []);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback(\n        (item: AdbSyncEntry) => {\n            switch (item.type) {\n                case LinuxFileType.Link:\n                case LinuxFileType.Directory:\n                    state.pushPathQuery(path.resolve(state.path!, item.name!));\n                    break;\n                case LinuxFileType.File:\n                    switch (path.extname(item.name!)) {\n                        case \".jpg\":\n                        case \".png\":\n                        case \".svg\":\n                        case \".gif\":\n                            previewImage(path.resolve(state.path!, item.name!));\n                            break;\n                    }\n                    break;\n            }\n        },\n        [previewImage]\n    );\n\n    const selection = useConst(\n        () =>\n            new Selection({\n                onSelectionChanged() {\n                    runInAction(() => {\n                        state.selectedItems =\n                            selection.getSelection() as ListItem[];\n                    });\n                },\n            })\n    );\n\n    const showContextMenu = useCallback(\n        (item?: AdbSyncEntry, index?: number, e?: Event) => {\n            if (!e) {\n                return false;\n            }\n\n            if (state.menuItems.length) {\n                runInAction(() => {\n                    state.contextMenuTarget = e as MouseEvent;\n                });\n            }\n\n            return false;\n        },\n        []\n    );\n    const hideContextMenu = useCallback(() => {\n        runInAction(() => (state.contextMenuTarget = undefined));\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>File Manager - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.menuItems} />\n\n            <Breadcrumb items={state.breadcrumbItems} />\n\n            <StackItem\n                grow\n                styles={{\n                    root: {\n                        margin: \"-8px -16px -16px -16px\",\n                        padding: \"8px 16px 16px 16px\",\n                        overflowY: \"auto\",\n                    },\n                }}\n            >\n                <MarqueeSelection selection={selection}>\n                    <ShimmeredDetailsList\n                        items={state.sortedList}\n                        columns={state.columns}\n                        setKey={state.path}\n                        selection={selection}\n                        layoutMode={DetailsListLayoutMode.justified}\n                        enableShimmer={\n                            state.loading && state.items.length === 0\n                        }\n                        onItemInvoked={handleItemInvoked}\n                        onItemContextMenu={showContextMenu}\n                        onRenderDetailsHeader={renderDetailsHeader}\n                        usePageCache\n                        useReducedRowRenderer\n                    />\n                </MarqueeSelection>\n\n                {previewUrl && (\n                    <Layer>\n                        <Overlay onClick={hidePreview}>\n                            <div\n                                style={{\n                                    width: \"100%\",\n                                    height: \"100%\",\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"center\",\n                                }}\n                            >\n                                {/* eslint-disable-next-line @next/next/no-img-element */}\n                                <img\n                                    src={previewUrl}\n                                    alt=\"\"\n                                    style={{\n                                        maxWidth: \"100%\",\n                                        maxHeight: \"100%\",\n                                    }}\n                                />\n                            </div>\n                        </Overlay>\n                    </Layer>\n                )}\n            </StackItem>\n\n            <NoSsr>\n                <ContextualMenu\n                    items={state.menuItems}\n                    hidden={!state.contextMenuTarget}\n                    directionalHint={DirectionalHint.bottomLeftEdge}\n                    target={state.contextMenuTarget}\n                    onDismiss={hideContextMenu}\n                    contextualMenuItemAs={(props) => (\n                        <ContextualMenuItem {...props} hasIcons={false} />\n                    )}\n                />\n            </NoSsr>\n\n            <UploadDialog />\n        </Stack>\n    );\n};\n\nexport default observer(FileManager);\n"],"names":["window","__NEXT_P","push","__webpack_require__","toListItem","item","key","name","initializeFileTypeIcons","classNames","mergeStyleSets","cursor","textDecoration","renderDetailsHeader","props","defaultRender","styles","concatStyleSets","root","paddingTop","compareCaseInsensitively","a","b","result","toLocaleLowerCase","localeCompare","state","breadcrumbItems","part","list","path","split","filter","Boolean","map","segment","text","onClick","e","pushPathQuery","unshift","length","isCurrentItem","menuItems","selectedItems","iconProps","iconName","Icons","style","height","fontSize","lineHeight","disabled","GLOBAL_STATE","files","pickFile","multiple","i","file","upload","type","LinuxFileType","sync","itemPath","read","pipeTo","saveFile","Number","size","dispose","output","loadFiles","sortedList","items","slice","sort","aIsFile","bIsFile","aSortKey","sortKey","bSortKey","sortDescending","columns","isIconOnly","minWidth","maxWidth","isCollapsible","onRender","getFileTypeIconProps","FileIconType","extension","iconSrc","_fluentui_style_utilities__WEBPACK_IMPORTED_MODULE_1__","q7","code","src","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Icon","imageProps","crossOrigin","width","isRowHeader","span","className","data-selection-invoke","concat","mode","toString","formatSize","Date","mtime","toLocaleString","features","includes","AdbFeatures","ctime","atime","onColumnClick","column","runInAction","isSorted","isSortedDescending","changeDirectory","constructor","initial","visible","loading","uploading","uploadPath","undefined","uploadedSize","uploadTotalSize","debouncedUploadedSize","uploadSpeed","contextMenuTarget","Router","query","asyncEffect","signal","currentPath","linkItems","intervalId","setInterval","aborted","entry","opendir","isDirectory","_yume_chan_adb__WEBPACK_IMPORTED_MODULE_2__","d6","File","permission","clearInterval","action","createFileStream","pipeThrough","ChunkStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","uploaded","write","lastModified","makeAutoObservable","observable","autorun","UploadDialog","observer","Dialog","hidden","dialogContentProps","title","subText","ProgressIndicator","description","formatSpeed","percentComplete","FileManager","useEffect","router","useRouter","pathQuery","replace","isArray","previewUrl","setPreviewUrl","useState","previewImage","useCallback","readable","response","Response","blob","url","URL","createObjectURL","hidePreview","handleItemInvoked","selection","useConst","Selection","onSelectionChanged","getSelection","showContextMenu","index","hideContextMenu","jsxs","Stack","RouteStackProps","Head","CommandBar","Breadcrumb","StackItem","grow","margin","padding","overflowY","MarqueeSelection","ShimmeredDetailsList","setKey","layoutMode","DetailsListLayoutMode","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","useReducedRowRenderer","Layer","Overlay","div","display","alignItems","justifyContent","img","alt","maxHeight","NoSsr","ContextualMenu","directionalHint","DirectionalHint","target","onDismiss","contextualMenuItemAs","ContextualMenuItem","hasIcons","__webpack_exports__"],"sourceRoot":""}