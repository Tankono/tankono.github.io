{"version":3,"file":"static/chunks/pages/logcat-8f2d8a4d3dab88e3.js","mappings":"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","sources":["webpack://_N_E/?5669","webpack://_N_E/./src/pages/logcat.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/logcat\",\n      function () {\n        return require(\"private-next-pages/logcat.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/logcat\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport {\n    AndroidLogEntry,\n    AndroidLogPriority,\n    Logcat,\n    LogcatFormat,\n    formatAndroidLogEntry,\n} from \"@yume-chan/android-bin\";\nimport {\n    AbortController,\n    ReadableStream,\n    WritableStream,\n} from \"@yume-chan/stream-extra\";\nimport {\n    action,\n    autorun,\n    makeAutoObservable,\n    observable,\n    runInAction,\n} from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { PointerEvent } from \"react\";\n\nimport {\n    CommandBar,\n    Grid,\n    GridColumn,\n    GridHeaderProps,\n    GridRowProps,\n    ObservableListSelection,\n    isModKey,\n} from \"../components\";\nimport { GLOBAL_STATE } from \"../state\";\nimport { Icons, RouteStackProps, useStableCallback } from \"../utils\";\n\nconst LINE_HEIGHT = 32;\n\nconst useClasses = makeStyles({\n    grid: {\n        height: \"100%\",\n        marginLeft: \"-16px\",\n        marginRight: \"-16px\",\n    },\n    header: {\n        textAlign: \"center\",\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        \"&:hover\": {\n            backgroundColor: \"#f3f2f1\",\n        },\n    },\n    selected: {\n        backgroundColor: \"#edebe9\",\n    },\n    code: {\n        fontFamily: \"monospace\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        lineHeight: LINE_HEIGHT + \"px\",\n        cursor: \"default\",\n        ...shorthands.overflow(\"hidden\"),\n    },\n});\n\nexport interface Column extends GridColumn {\n    title: string;\n}\n\nexport interface LogRow extends AndroidLogEntry {\n    timeString?: string;\n}\n\nconst state = makeAutoObservable(\n    {\n        logcat: undefined as Logcat | undefined,\n        running: false,\n        buffer: [] as LogRow[],\n        flushRequested: false,\n        list: [] as LogRow[],\n        selection: new ObservableListSelection(),\n        count: 0,\n        stream: undefined as ReadableStream<AndroidLogEntry> | undefined,\n        stopSignal: undefined as AbortController | undefined,\n        animationFrameId: undefined as number | undefined,\n        start() {\n            if (this.running) {\n                return;\n            }\n\n            // Logcat has its internal buffer,\n            // it will output all logs in the buffer when started.\n            // so clear the list before starting.\n            this.list = [];\n\n            this.running = true;\n            this.stream = this.logcat!.binary();\n            this.stopSignal = new AbortController();\n            this.stream\n                .pipeTo(\n                    new WritableStream({\n                        write: (chunk) => {\n                            this.buffer.push(chunk);\n                            if (!this.flushRequested) {\n                                this.flushRequested = true;\n                                requestAnimationFrame(this.flush);\n                            }\n                        },\n                    }),\n                    { signal: this.stopSignal.signal }\n                )\n                .catch(() => {});\n        },\n        flush() {\n            this.list.push(...this.buffer);\n            this.buffer = [];\n            this.flushRequested = false;\n        },\n        stop() {\n            this.running = false;\n            this.stopSignal!.abort();\n        },\n        clear() {\n            this.list = [];\n            this.selection.clear();\n        },\n        get empty() {\n            return this.list.length === 0;\n        },\n        get commandBar(): ICommandBarItemProps[] {\n            return [\n                this.running\n                    ? {\n                          key: \"stop\",\n                          text: \"Stop\",\n                          iconProps: { iconName: Icons.Stop },\n                          onClick: () => this.stop(),\n                      }\n                    : {\n                          key: \"start\",\n                          text: \"Start\",\n                          disabled: this.logcat === undefined,\n                          iconProps: { iconName: Icons.Play },\n                          onClick: () => this.start(),\n                      },\n                {\n                    key: \"clear\",\n                    text: \"Clear\",\n                    disabled: this.empty,\n                    iconProps: { iconName: Icons.Delete },\n                    onClick: () => this.clear(),\n                },\n                {\n                    key: \"copyAll\",\n                    text: \"Copy Rows\",\n                    disabled: this.selection.size === 0,\n                    iconProps: { iconName: Icons.Copy },\n                    onClick: () => {\n                        let text = \"\";\n                        for (const index of this.selection) {\n                            text +=\n                                formatAndroidLogEntry(\n                                    this.list[index],\n                                    LogcatFormat.Brief\n                                ) + \"\\n\";\n                        }\n                        // Chrome on Windows can't copy null characters\n                        text = text.replace(/\\u0000/g, \"\");\n                        navigator.clipboard.writeText(text);\n                    },\n                },\n                {\n                    key: \"copyText\",\n                    text: \"Copy Messages\",\n                    disabled: this.selection.size === 0,\n                    iconProps: { iconName: Icons.Copy },\n                    onClick: () => {\n                        let text = \"\";\n                        for (const index of this.selection) {\n                            text += this.list[index].message + \"\\n\";\n                        }\n                        // Chrome on Windows can't copy null characters\n                        text = text.replace(/\\u0000/g, \"\");\n                        navigator.clipboard.writeText(text);\n                    },\n                },\n            ];\n        },\n        get columns(): Column[] {\n            return [\n                {\n                    width: 200,\n                    title: \"Time\",\n                    CellComponent: ({\n                        rowIndex,\n                        columnIndex,\n                        className,\n                        ...rest\n                    }) => {\n                        const item = this.list[rowIndex];\n                        if (!item.timeString) {\n                            item.timeString = new Date(\n                                item.second * 1000\n                            ).toISOString();\n                        }\n\n                        const classes = useClasses();\n\n                        return (\n                            <div\n                                className={mergeClasses(\n                                    classes.code,\n                                    className\n                                )}\n                                {...rest}\n                            >\n                                {item.timeString}\n                            </div>\n                        );\n                    },\n                },\n                {\n                    width: 60,\n                    title: \"PID\",\n                    CellComponent: ({\n                        rowIndex,\n                        columnIndex,\n                        className,\n                        ...rest\n                    }) => {\n                        const item = this.list[rowIndex];\n\n                        const classes = useClasses();\n\n                        return (\n                            <div\n                                className={mergeClasses(\n                                    classes.code,\n                                    className\n                                )}\n                                {...rest}\n                            >\n                                {item.pid}\n                            </div>\n                        );\n                    },\n                },\n                {\n                    width: 60,\n                    title: \"TID\",\n                    CellComponent: ({\n                        rowIndex,\n                        columnIndex,\n                        className,\n                        ...rest\n                    }) => {\n                        const item = this.list[rowIndex];\n\n                        const classes = useClasses();\n\n                        return (\n                            <div\n                                className={mergeClasses(\n                                    classes.code,\n                                    className\n                                )}\n                                {...rest}\n                            >\n                                {item.tid}\n                            </div>\n                        );\n                    },\n                },\n                {\n                    width: 80,\n                    title: \"Priority\",\n                    CellComponent: ({\n                        rowIndex,\n                        columnIndex,\n                        className,\n                        ...rest\n                    }) => {\n                        const item = this.list[rowIndex];\n\n                        const classes = useClasses();\n\n                        return (\n                            <div\n                                className={mergeClasses(\n                                    classes.code,\n                                    className\n                                )}\n                                {...rest}\n                            >\n                                {AndroidLogPriority[item.priority]}\n                            </div>\n                        );\n                    },\n                },\n                {\n                    width: 300,\n                    title: \"Tag\",\n                    CellComponent: ({\n                        rowIndex,\n                        columnIndex,\n                        className,\n                        ...rest\n                    }) => {\n                        const item = this.list[rowIndex];\n\n                        const classes = useClasses();\n\n                        return (\n                            <div\n                                className={mergeClasses(\n                                    classes.code,\n                                    className\n                                )}\n                                {...rest}\n                            >\n                                {item.tag}\n                            </div>\n                        );\n                    },\n                },\n                {\n                    width: 300,\n                    flexGrow: 1,\n                    title: \"Message\",\n                    CellComponent: ({\n                        rowIndex,\n                        columnIndex,\n                        className,\n                        ...rest\n                    }) => {\n                        const item = this.list[rowIndex];\n                        const classes = useClasses();\n\n                        return (\n                            <div\n                                className={mergeClasses(\n                                    classes.code,\n                                    className\n                                )}\n                                {...rest}\n                            >\n                                {item.message}\n                            </div>\n                        );\n                    },\n                },\n            ];\n        },\n    },\n    {\n        buffer: false,\n        list: observable.shallow,\n        flush: action.bound,\n    }\n);\n\nautorun(() => {\n    if (GLOBAL_STATE.device) {\n        runInAction(() => {\n            state.logcat = new Logcat(GLOBAL_STATE.device!);\n        });\n    } else {\n        runInAction(() => {\n            state.logcat = undefined;\n            if (state.running) {\n                state.stop();\n            }\n        });\n    }\n});\n\nconst Header = observer(function Header({\n    className,\n    columnIndex,\n    ...rest\n}: GridHeaderProps) {\n    const classes = useClasses();\n\n    return (\n        <div className={mergeClasses(className, classes.header)} {...rest}>\n            {state.columns[columnIndex].title}\n        </div>\n    );\n});\n\nconst Row = observer(function Row({\n    className,\n    rowIndex,\n    ...rest\n}: GridRowProps) {\n    const classes = useClasses();\n\n    const handlePointerDown = useStableCallback(\n        (e: PointerEvent<HTMLDivElement>) => {\n            runInAction(() => {\n                e.preventDefault();\n                e.stopPropagation();\n                state.selection.select(rowIndex, isModKey(e), e.shiftKey);\n            });\n        }\n    );\n\n    return (\n        <div\n            className={mergeClasses(\n                className,\n                classes.row,\n                state.selection.has(rowIndex) && classes.selected\n            )}\n            onPointerDown={handlePointerDown}\n            {...rest}\n        />\n    );\n});\n\nconst LogcatPage: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Logcat - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBar} />\n\n            <StackItem grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={state.list.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={state.columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(LogcatPage);\n"],"names":["window","__NEXT_P","push","__webpack_require__","useClasses","makeStyles","grid","height","marginLeft","marginRight","header","textAlign","lineHeight","concat","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","state","makeAutoObservable","logcat","undefined","running","buffer","flushRequested","list","selection","ObservableListSelection","count","stream","stopSignal","animationFrameId","start","binary","AbortController","pipeTo","WritableStream","write","chunk","requestAnimationFrame","flush","signal","catch","stop","abort","clear","empty","length","commandBar","key","text","iconProps","iconName","Icons","onClick","disabled","size","index","formatAndroidLogEntry","LogcatFormat","replace","navigator","clipboard","writeText","message","columns","width","title","CellComponent","rowIndex","columnIndex","className","rest","param","item","timeString","Date","second","toISOString","classes","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","mergeClasses","pid","tid","AndroidLogPriority","priority","tag","flexGrow","observable","action","autorun","GLOBAL_STATE","runInAction","Logcat","Header","observer","Row","handlePointerDown","useStableCallback","e","preventDefault","stopPropagation","select","isModKey","shiftKey","has","onPointerDown","LogcatPage","jsxs","Stack","RouteStackProps","Head","CommandBar","items","StackItem","grow","Grid","rowCount","rowHeight","HeaderComponent","RowComponent","__webpack_exports__"],"sourceRoot":""}