{"version":3,"file":"static/chunks/207-8767076c7ba5881f.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.106.1_5ndqzdd6t4rivxsukjv3i3ak2q/node_modules/@fluentui/react/lib/components/src/components/Layer/LayerHost.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/webm-muxer@1.2.1/node_modules/webm-muxer/build/webm-muxer.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n","\"use strict\";\nvar WebMMuxer = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __pow = Math.pow;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n  var __accessCheck = (obj, member, msg) => {\n    if (!member.has(obj))\n      throw TypeError(\"Cannot \" + msg);\n  };\n  var __privateGet = (obj, member, getter) => {\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n  };\n  var __privateAdd = (obj, member, value) => {\n    if (member.has(obj))\n      throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n  };\n  var __privateSet = (obj, member, value, setter) => {\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n  };\n  var __privateMethod = (obj, member, method) => {\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n  };\n\n  // src/main.ts\n  var main_exports = {};\n  __export(main_exports, {\n    default: () => main_default\n  });\n\n  // src/ebml.ts\n  var EBMLFloat32 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var EBMLFloat64 = class {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n  var measureUnsignedInt = (value) => {\n    if (value < 1 << 8) {\n      return 1;\n    } else if (value < 1 << 16) {\n      return 2;\n    } else if (value < 1 << 24) {\n      return 3;\n    } else if (value < __pow(2, 32)) {\n      return 4;\n    } else if (value < __pow(2, 40)) {\n      return 5;\n    } else {\n      return 6;\n    }\n  };\n  var measureEBMLVarInt = (value) => {\n    if (value < (1 << 7) - 1) {\n      return 1;\n    } else if (value < (1 << 14) - 1) {\n      return 2;\n    } else if (value < (1 << 21) - 1) {\n      return 3;\n    } else if (value < (1 << 28) - 1) {\n      return 4;\n    } else if (value < __pow(2, 35) - 1) {\n      return 5;\n    } else if (value < __pow(2, 42) - 1) {\n      return 6;\n    } else {\n      throw new Error(\"EBML VINT size not supported \" + value);\n    }\n  };\n\n  // src/write_target.ts\n  var _helper, _helperView, _writeFloat32, writeFloat32_fn, _writeFloat64, writeFloat64_fn, _writeUnsignedInt, writeUnsignedInt_fn, _writeString, writeString_fn;\n  var WriteTarget = class {\n    constructor() {\n      __privateAdd(this, _writeFloat32);\n      __privateAdd(this, _writeFloat64);\n      __privateAdd(this, _writeUnsignedInt);\n      __privateAdd(this, _writeString);\n      this.pos = 0;\n      __privateAdd(this, _helper, new Uint8Array(8));\n      __privateAdd(this, _helperView, new DataView(__privateGet(this, _helper).buffer));\n      this.offsets = /* @__PURE__ */ new WeakMap();\n      this.dataOffsets = /* @__PURE__ */ new WeakMap();\n    }\n    writeEBMLVarInt(value, width = measureEBMLVarInt(value)) {\n      let pos = 0;\n      switch (width) {\n        case 1:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 7 | value);\n          break;\n        case 2:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 6 | value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 3:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 5 | value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 4:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 4 | value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 5:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 3 | value / __pow(2, 32) & 7);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        case 6:\n          __privateGet(this, _helperView).setUint8(pos++, 1 << 2 | value / __pow(2, 40) & 3);\n          __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 32) | 0);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n          __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n          __privateGet(this, _helperView).setUint8(pos++, value);\n          break;\n        default:\n          throw new Error(\"Bad EBML VINT size \" + width);\n      }\n      this.write(__privateGet(this, _helper).subarray(0, pos));\n    }\n    writeEBML(data) {\n      var _a, _b;\n      if (data instanceof Uint8Array) {\n        this.write(data);\n      } else if (Array.isArray(data)) {\n        for (let elem of data) {\n          this.writeEBML(elem);\n        }\n      } else {\n        this.offsets.set(data, this.pos);\n        __privateMethod(this, _writeUnsignedInt, writeUnsignedInt_fn).call(this, data.id);\n        if (Array.isArray(data.data)) {\n          let sizePos = this.pos;\n          let sizeSize = (_a = data.size) != null ? _a : 4;\n          this.seek(this.pos + sizeSize);\n          let startPos = this.pos;\n          this.dataOffsets.set(data, startPos);\n          this.writeEBML(data.data);\n          let size = this.pos - startPos;\n          let endPos = this.pos;\n          this.seek(sizePos);\n          this.writeEBMLVarInt(size, sizeSize);\n          this.seek(endPos);\n        } else if (typeof data.data === \"number\") {\n          let size = (_b = data.size) != null ? _b : measureUnsignedInt(data.data);\n          this.writeEBMLVarInt(size);\n          __privateMethod(this, _writeUnsignedInt, writeUnsignedInt_fn).call(this, data.data, size);\n        } else if (typeof data.data === \"string\") {\n          this.writeEBMLVarInt(data.data.length);\n          __privateMethod(this, _writeString, writeString_fn).call(this, data.data);\n        } else if (data.data instanceof Uint8Array) {\n          this.writeEBMLVarInt(data.data.byteLength, data.size);\n          this.write(data.data);\n        } else if (data.data instanceof EBMLFloat32) {\n          this.writeEBMLVarInt(4);\n          __privateMethod(this, _writeFloat32, writeFloat32_fn).call(this, data.data.value);\n        } else if (data.data instanceof EBMLFloat64) {\n          this.writeEBMLVarInt(8);\n          __privateMethod(this, _writeFloat64, writeFloat64_fn).call(this, data.data.value);\n        }\n      }\n    }\n  };\n  _helper = new WeakMap();\n  _helperView = new WeakMap();\n  _writeFloat32 = new WeakSet();\n  writeFloat32_fn = function(value) {\n    __privateGet(this, _helperView).setFloat32(0, value, false);\n    this.write(__privateGet(this, _helper).subarray(0, 4));\n  };\n  _writeFloat64 = new WeakSet();\n  writeFloat64_fn = function(value) {\n    __privateGet(this, _helperView).setFloat64(0, value, false);\n    this.write(__privateGet(this, _helper));\n  };\n  _writeUnsignedInt = new WeakSet();\n  writeUnsignedInt_fn = function(value, width = measureUnsignedInt(value)) {\n    let pos = 0;\n    switch (width) {\n      case 6:\n        __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 40) | 0);\n      case 5:\n        __privateGet(this, _helperView).setUint8(pos++, value / __pow(2, 32) | 0);\n      case 4:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 24);\n      case 3:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 16);\n      case 2:\n        __privateGet(this, _helperView).setUint8(pos++, value >> 8);\n      case 1:\n        __privateGet(this, _helperView).setUint8(pos++, value);\n        break;\n      default:\n        throw new Error(\"Bad UINT size \" + width);\n    }\n    this.write(__privateGet(this, _helper).subarray(0, pos));\n  };\n  _writeString = new WeakSet();\n  writeString_fn = function(str) {\n    this.write(new Uint8Array(str.split(\"\").map((x) => x.charCodeAt(0))));\n  };\n  var _buffer, _bytes;\n  var ArrayBufferWriteTarget = class extends WriteTarget {\n    constructor() {\n      super();\n      __privateAdd(this, _buffer, new ArrayBuffer(__pow(2, 16)));\n      __privateAdd(this, _bytes, new Uint8Array(__privateGet(this, _buffer)));\n    }\n    ensureSize(size) {\n      let newLength = __privateGet(this, _buffer).byteLength;\n      while (newLength < size)\n        newLength *= 2;\n      if (newLength === __privateGet(this, _buffer).byteLength)\n        return;\n      let newBuffer = new ArrayBuffer(newLength);\n      let newBytes = new Uint8Array(newBuffer);\n      newBytes.set(__privateGet(this, _bytes), 0);\n      __privateSet(this, _buffer, newBuffer);\n      __privateSet(this, _bytes, newBytes);\n    }\n    write(data) {\n      this.ensureSize(this.pos + data.byteLength);\n      __privateGet(this, _bytes).set(data, this.pos);\n      this.pos += data.byteLength;\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    finalize() {\n      this.ensureSize(this.pos);\n      return __privateGet(this, _buffer).slice(0, this.pos);\n    }\n  };\n  _buffer = new WeakMap();\n  _bytes = new WeakMap();\n  var FILE_CHUNK_SIZE = __pow(2, 24);\n  var MAX_CHUNKS_AT_ONCE = 2;\n  var _stream, _chunks;\n  var FileSystemWritableFileStreamWriteTarget = class extends WriteTarget {\n    constructor(stream) {\n      super();\n      __privateAdd(this, _stream, void 0);\n      __privateAdd(this, _chunks, []);\n      __privateSet(this, _stream, stream);\n    }\n    write(data) {\n      this.writeDataIntoChunks(data, this.pos);\n      this.flushChunks();\n      this.pos += data.byteLength;\n    }\n    writeDataIntoChunks(data, position) {\n      let chunkIndex = __privateGet(this, _chunks).findIndex((x) => x.start <= position && position < x.start + FILE_CHUNK_SIZE);\n      if (chunkIndex === -1)\n        chunkIndex = this.createChunk(position);\n      let chunk = __privateGet(this, _chunks)[chunkIndex];\n      let relativePosition = position - chunk.start;\n      let toWrite = data.subarray(0, Math.min(FILE_CHUNK_SIZE - relativePosition, data.byteLength));\n      chunk.data.set(toWrite, relativePosition);\n      let section = {\n        start: relativePosition,\n        end: relativePosition + toWrite.byteLength\n      };\n      insertSectionIntoFileChunk(chunk, section);\n      if (chunk.written[0].start === 0 && chunk.written[0].end === FILE_CHUNK_SIZE) {\n        chunk.shouldFlush = true;\n      }\n      if (__privateGet(this, _chunks).length > MAX_CHUNKS_AT_ONCE) {\n        for (let i = 0; i < __privateGet(this, _chunks).length - 1; i++) {\n          __privateGet(this, _chunks)[i].shouldFlush = true;\n        }\n        this.flushChunks();\n      }\n      if (toWrite.byteLength < data.byteLength) {\n        this.writeDataIntoChunks(data.subarray(toWrite.byteLength), position + toWrite.byteLength);\n      }\n    }\n    createChunk(includesPosition) {\n      let start = Math.floor(includesPosition / FILE_CHUNK_SIZE) * FILE_CHUNK_SIZE;\n      let chunk = {\n        start,\n        data: new Uint8Array(FILE_CHUNK_SIZE),\n        written: [],\n        shouldFlush: false\n      };\n      __privateGet(this, _chunks).push(chunk);\n      __privateGet(this, _chunks).sort((a, b) => a.start - b.start);\n      return __privateGet(this, _chunks).indexOf(chunk);\n    }\n    flushChunks(force = false) {\n      for (let i = 0; i < __privateGet(this, _chunks).length; i++) {\n        let chunk = __privateGet(this, _chunks)[i];\n        if (!chunk.shouldFlush && !force)\n          continue;\n        for (let section of chunk.written) {\n          __privateGet(this, _stream).write({\n            type: \"write\",\n            data: chunk.data.subarray(section.start, section.end),\n            position: chunk.start + section.start\n          });\n        }\n        __privateGet(this, _chunks).splice(i--, 1);\n      }\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    finalize() {\n      this.flushChunks(true);\n    }\n  };\n  _stream = new WeakMap();\n  _chunks = new WeakMap();\n  var insertSectionIntoFileChunk = (chunk, section) => {\n    let low = 0;\n    let high = chunk.written.length - 1;\n    let index = -1;\n    while (low <= high) {\n      let mid = Math.floor(low + (high - low + 1) / 2);\n      if (chunk.written[mid].start <= section.start) {\n        low = mid + 1;\n        index = mid;\n      } else {\n        high = mid - 1;\n      }\n    }\n    chunk.written.splice(index + 1, 0, section);\n    if (index === -1 || chunk.written[index].end < section.start)\n      index++;\n    while (index < chunk.written.length - 1 && chunk.written[index].end >= chunk.written[index + 1].start) {\n      chunk.written[index].end = Math.max(chunk.written[index].end, chunk.written[index + 1].end);\n      chunk.written.splice(index + 1, 1);\n    }\n  };\n  var _sections, _onFlush;\n  var StreamingWriteTarget = class extends WriteTarget {\n    constructor(onFlush) {\n      super();\n      __privateAdd(this, _sections, []);\n      __privateAdd(this, _onFlush, void 0);\n      __privateSet(this, _onFlush, onFlush);\n    }\n    write(data) {\n      __privateGet(this, _sections).push({\n        data: data.slice(),\n        start: this.pos\n      });\n      this.pos += data.byteLength;\n    }\n    seek(newPos) {\n      this.pos = newPos;\n    }\n    flush(done) {\n      if (__privateGet(this, _sections).length === 0)\n        return;\n      let chunks = [];\n      let sorted = [...__privateGet(this, _sections)].sort((a, b) => a.start - b.start);\n      chunks.push({\n        start: sorted[0].start,\n        size: sorted[0].data.byteLength\n      });\n      for (let i = 1; i < sorted.length; i++) {\n        let lastChunk = chunks[chunks.length - 1];\n        let section = sorted[i];\n        if (section.start <= lastChunk.start + lastChunk.size) {\n          lastChunk.size = Math.max(lastChunk.size, section.start + section.data.byteLength - lastChunk.start);\n        } else {\n          chunks.push({\n            start: section.start,\n            size: section.data.byteLength\n          });\n        }\n      }\n      for (let chunk of chunks) {\n        chunk.data = new Uint8Array(chunk.size);\n        for (let section of __privateGet(this, _sections)) {\n          if (chunk.start <= section.start && section.start < chunk.start + chunk.size) {\n            chunk.data.set(section.data, section.start - chunk.start);\n          }\n        }\n        let isLastFlush = done && chunk === chunks[chunks.length - 1];\n        __privateGet(this, _onFlush).call(this, chunk.data, chunk.start, isLastFlush);\n      }\n      __privateGet(this, _sections).length = 0;\n    }\n  };\n  _sections = new WeakMap();\n  _onFlush = new WeakMap();\n\n  // src/main.ts\n  var VIDEO_TRACK_NUMBER = 1;\n  var AUDIO_TRACK_NUMBER = 2;\n  var VIDEO_TRACK_TYPE = 1;\n  var AUDIO_TRACK_TYPE = 2;\n  var MAX_CHUNK_LENGTH_MS = __pow(2, 15);\n  var CODEC_PRIVATE_MAX_SIZE = __pow(2, 12);\n  var APP_NAME = \"https://github.com/Vanilagy/webm-muxer\";\n  var SEGMENT_SIZE_BYTES = 6;\n  var CLUSTER_SIZE_BYTES = 5;\n  var _target, _options, _segment, _segmentInfo, _seekHead, _tracksElement, _segmentDuration, _colourElement, _videoCodecPrivate, _audioCodecPrivate, _cues, _currentCluster, _currentClusterTimestamp, _duration, _videoChunkQueue, _audioChunkQueue, _lastVideoTimestamp, _lastAudioTimestamp, _colorSpace, _finalized, _validateOptions, validateOptions_fn, _createFileHeader, createFileHeader_fn, _writeEBMLHeader, writeEBMLHeader_fn, _createSeekHead, createSeekHead_fn, _createSegmentInfo, createSegmentInfo_fn, _createTracks, createTracks_fn, _createSegment, createSegment_fn, _createCues, createCues_fn, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn, _segmentDataOffset, segmentDataOffset_get, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn, _fixVP9ColorSpace, fixVP9ColorSpace_fn, _createInternalChunk, createInternalChunk_fn, _writeSimpleBlock, writeSimpleBlock_fn, _writeCodecPrivate, writeCodecPrivate_fn, _createNewCluster, createNewCluster_fn, _finalizeCurrentCluster, finalizeCurrentCluster_fn, _ensureNotFinalized, ensureNotFinalized_fn;\n  var WebMMuxer = class {\n    constructor(options) {\n      __privateAdd(this, _validateOptions);\n      __privateAdd(this, _createFileHeader);\n      __privateAdd(this, _writeEBMLHeader);\n      __privateAdd(this, _createSeekHead);\n      __privateAdd(this, _createSegmentInfo);\n      __privateAdd(this, _createTracks);\n      __privateAdd(this, _createSegment);\n      __privateAdd(this, _createCues);\n      __privateAdd(this, _maybeFlushStreamingTarget);\n      __privateAdd(this, _segmentDataOffset);\n      __privateAdd(this, _writeVideoDecoderConfig);\n      __privateAdd(this, _fixVP9ColorSpace);\n      __privateAdd(this, _createInternalChunk);\n      __privateAdd(this, _writeSimpleBlock);\n      __privateAdd(this, _writeCodecPrivate);\n      __privateAdd(this, _createNewCluster);\n      __privateAdd(this, _finalizeCurrentCluster);\n      __privateAdd(this, _ensureNotFinalized);\n      __privateAdd(this, _target, void 0);\n      __privateAdd(this, _options, void 0);\n      __privateAdd(this, _segment, void 0);\n      __privateAdd(this, _segmentInfo, void 0);\n      __privateAdd(this, _seekHead, void 0);\n      __privateAdd(this, _tracksElement, void 0);\n      __privateAdd(this, _segmentDuration, void 0);\n      __privateAdd(this, _colourElement, void 0);\n      __privateAdd(this, _videoCodecPrivate, void 0);\n      __privateAdd(this, _audioCodecPrivate, void 0);\n      __privateAdd(this, _cues, void 0);\n      __privateAdd(this, _currentCluster, void 0);\n      __privateAdd(this, _currentClusterTimestamp, void 0);\n      __privateAdd(this, _duration, 0);\n      __privateAdd(this, _videoChunkQueue, []);\n      __privateAdd(this, _audioChunkQueue, []);\n      __privateAdd(this, _lastVideoTimestamp, 0);\n      __privateAdd(this, _lastAudioTimestamp, 0);\n      __privateAdd(this, _colorSpace, void 0);\n      __privateAdd(this, _finalized, false);\n      __privateMethod(this, _validateOptions, validateOptions_fn).call(this, options);\n      __privateSet(this, _options, options);\n      if (options.target === \"buffer\") {\n        __privateSet(this, _target, new ArrayBufferWriteTarget());\n      } else if (options.target instanceof FileSystemWritableFileStream) {\n        __privateSet(this, _target, new FileSystemWritableFileStreamWriteTarget(options.target));\n      } else if (typeof options.target === \"function\") {\n        __privateSet(this, _target, new StreamingWriteTarget(options.target));\n      } else {\n        throw new Error(`Invalid target: ${options.target}`);\n      }\n      __privateMethod(this, _createFileHeader, createFileHeader_fn).call(this);\n    }\n    addVideoChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addVideoChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addVideoChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).video)\n        throw new Error(\"No video track declared.\");\n      if (meta)\n        __privateMethod(this, _writeVideoDecoderConfig, writeVideoDecoderConfig_fn).call(this, meta);\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, VIDEO_TRACK_NUMBER);\n      if (__privateGet(this, _options).video.codec === \"V_VP9\")\n        __privateMethod(this, _fixVP9ColorSpace, fixVP9ColorSpace_fn).call(this, internalChunk);\n      __privateSet(this, _lastVideoTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _audioChunkQueue).length > 0 && __privateGet(this, _audioChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let audioChunk = __privateGet(this, _audioChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, audioChunk);\n      }\n      if (!__privateGet(this, _options).audio || internalChunk.timestamp <= __privateGet(this, _lastAudioTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _videoChunkQueue).push(internalChunk);\n      }\n      __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n    }\n    addAudioChunk(chunk, meta, timestamp) {\n      let data = new Uint8Array(chunk.byteLength);\n      chunk.copyTo(data);\n      this.addAudioChunkRaw(data, chunk.type, timestamp != null ? timestamp : chunk.timestamp, meta);\n    }\n    addAudioChunkRaw(data, type, timestamp, meta) {\n      __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n      if (!__privateGet(this, _options).audio)\n        throw new Error(\"No audio track declared.\");\n      let internalChunk = __privateMethod(this, _createInternalChunk, createInternalChunk_fn).call(this, data, type, timestamp, AUDIO_TRACK_NUMBER);\n      __privateSet(this, _lastAudioTimestamp, internalChunk.timestamp);\n      while (__privateGet(this, _videoChunkQueue).length > 0 && __privateGet(this, _videoChunkQueue)[0].timestamp <= internalChunk.timestamp) {\n        let videoChunk = __privateGet(this, _videoChunkQueue).shift();\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, videoChunk);\n      }\n      if (!__privateGet(this, _options).video || internalChunk.timestamp <= __privateGet(this, _lastVideoTimestamp)) {\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, internalChunk);\n      } else {\n        __privateGet(this, _audioChunkQueue).push(internalChunk);\n      }\n      if (meta == null ? void 0 : meta.decoderConfig) {\n        __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _audioCodecPrivate), meta.decoderConfig.description);\n      }\n      __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n    }\n    finalize() {\n      while (__privateGet(this, _videoChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _videoChunkQueue).shift());\n      while (__privateGet(this, _audioChunkQueue).length > 0)\n        __privateMethod(this, _writeSimpleBlock, writeSimpleBlock_fn).call(this, __privateGet(this, _audioChunkQueue).shift());\n      __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n      __privateGet(this, _target).writeEBML(__privateGet(this, _cues));\n      let endPos = __privateGet(this, _target).pos;\n      let segmentSize = __privateGet(this, _target).pos - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _segment)) + 4);\n      __privateGet(this, _target).writeEBMLVarInt(segmentSize, SEGMENT_SIZE_BYTES);\n      __privateGet(this, _segmentDuration).data = new EBMLFloat64(__privateGet(this, _duration));\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _segmentDuration)));\n      __privateGet(this, _target).writeEBML(__privateGet(this, _segmentDuration));\n      __privateGet(this, _seekHead).data[0].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _cues)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _seekHead).data[1].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _segmentInfo)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _seekHead).data[2].data[1].data = __privateGet(this, _target).offsets.get(__privateGet(this, _tracksElement)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n      __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _seekHead)));\n      __privateGet(this, _target).writeEBML(__privateGet(this, _seekHead));\n      __privateGet(this, _target).seek(endPos);\n      __privateSet(this, _finalized, true);\n      if (__privateGet(this, _target) instanceof ArrayBufferWriteTarget) {\n        return __privateGet(this, _target).finalize();\n      } else if (__privateGet(this, _target) instanceof FileSystemWritableFileStreamWriteTarget) {\n        __privateGet(this, _target).finalize();\n      } else if (__privateGet(this, _target) instanceof StreamingWriteTarget) {\n        __privateGet(this, _target).flush(true);\n      }\n      return null;\n    }\n  };\n  _target = new WeakMap();\n  _options = new WeakMap();\n  _segment = new WeakMap();\n  _segmentInfo = new WeakMap();\n  _seekHead = new WeakMap();\n  _tracksElement = new WeakMap();\n  _segmentDuration = new WeakMap();\n  _colourElement = new WeakMap();\n  _videoCodecPrivate = new WeakMap();\n  _audioCodecPrivate = new WeakMap();\n  _cues = new WeakMap();\n  _currentCluster = new WeakMap();\n  _currentClusterTimestamp = new WeakMap();\n  _duration = new WeakMap();\n  _videoChunkQueue = new WeakMap();\n  _audioChunkQueue = new WeakMap();\n  _lastVideoTimestamp = new WeakMap();\n  _lastAudioTimestamp = new WeakMap();\n  _colorSpace = new WeakMap();\n  _finalized = new WeakMap();\n  _validateOptions = new WeakSet();\n  validateOptions_fn = function(options) {\n    if (options.type && options.type !== \"webm\" && options.type !== \"matroska\") {\n      throw new Error(`Invalid type: ${options.type}`);\n    }\n  };\n  _createFileHeader = new WeakSet();\n  createFileHeader_fn = function() {\n    __privateMethod(this, _writeEBMLHeader, writeEBMLHeader_fn).call(this);\n    __privateMethod(this, _createSeekHead, createSeekHead_fn).call(this);\n    __privateMethod(this, _createSegmentInfo, createSegmentInfo_fn).call(this);\n    __privateMethod(this, _createTracks, createTracks_fn).call(this);\n    __privateMethod(this, _createSegment, createSegment_fn).call(this);\n    __privateMethod(this, _createCues, createCues_fn).call(this);\n    __privateMethod(this, _maybeFlushStreamingTarget, maybeFlushStreamingTarget_fn).call(this);\n  };\n  _writeEBMLHeader = new WeakSet();\n  writeEBMLHeader_fn = function() {\n    var _a;\n    let ebmlHeader = { id: 440786851 /* EBML */, data: [\n      { id: 17030 /* EBMLVersion */, data: 1 },\n      { id: 17143 /* EBMLReadVersion */, data: 1 },\n      { id: 17138 /* EBMLMaxIDLength */, data: 4 },\n      { id: 17139 /* EBMLMaxSizeLength */, data: 8 },\n      { id: 17026 /* DocType */, data: (_a = __privateGet(this, _options).type) != null ? _a : \"webm\" },\n      { id: 17031 /* DocTypeVersion */, data: 2 },\n      { id: 17029 /* DocTypeReadVersion */, data: 2 }\n    ] };\n    __privateGet(this, _target).writeEBML(ebmlHeader);\n  };\n  _createSeekHead = new WeakSet();\n  createSeekHead_fn = function() {\n    const kaxCues = new Uint8Array([28, 83, 187, 107]);\n    const kaxInfo = new Uint8Array([21, 73, 169, 102]);\n    const kaxTracks = new Uint8Array([22, 84, 174, 107]);\n    let seekHead = { id: 290298740 /* SeekHead */, data: [\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxCues },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxInfo },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] },\n      { id: 19899 /* Seek */, data: [\n        { id: 21419 /* SeekID */, data: kaxTracks },\n        { id: 21420 /* SeekPosition */, size: 5, data: 0 }\n      ] }\n    ] };\n    __privateSet(this, _seekHead, seekHead);\n  };\n  _createSegmentInfo = new WeakSet();\n  createSegmentInfo_fn = function() {\n    let segmentDuration = { id: 17545 /* Duration */, data: new EBMLFloat64(0) };\n    __privateSet(this, _segmentDuration, segmentDuration);\n    let segmentInfo = { id: 357149030 /* Info */, data: [\n      { id: 2807729 /* TimestampScale */, data: 1e6 },\n      { id: 19840 /* MuxingApp */, data: APP_NAME },\n      { id: 22337 /* WritingApp */, data: APP_NAME },\n      segmentDuration\n    ] };\n    __privateSet(this, _segmentInfo, segmentInfo);\n  };\n  _createTracks = new WeakSet();\n  createTracks_fn = function() {\n    let tracksElement = { id: 374648427 /* Tracks */, data: [] };\n    __privateSet(this, _tracksElement, tracksElement);\n    if (__privateGet(this, _options).video) {\n      __privateSet(this, _videoCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n      let colourElement = { id: 21936 /* Colour */, data: [\n        { id: 21937 /* MatrixCoefficients */, data: 2 },\n        { id: 21946 /* TransferCharacteristics */, data: 2 },\n        { id: 21947 /* Primaries */, data: 2 },\n        { id: 21945 /* Range */, data: 0 }\n      ] };\n      __privateSet(this, _colourElement, colourElement);\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: VIDEO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: VIDEO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: VIDEO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).video.codec },\n        __privateGet(this, _videoCodecPrivate),\n        __privateGet(this, _options).video.frameRate ? { id: 2352003 /* DefaultDuration */, data: 1e9 / __privateGet(this, _options).video.frameRate } : null,\n        { id: 224 /* Video */, data: [\n          { id: 176 /* PixelWidth */, data: __privateGet(this, _options).video.width },\n          { id: 186 /* PixelHeight */, data: __privateGet(this, _options).video.height },\n          colourElement\n        ] }\n      ].filter(Boolean) });\n    }\n    if (__privateGet(this, _options).audio) {\n      __privateSet(this, _audioCodecPrivate, { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE) });\n      tracksElement.data.push({ id: 174 /* TrackEntry */, data: [\n        { id: 215 /* TrackNumber */, data: AUDIO_TRACK_NUMBER },\n        { id: 29637 /* TrackUID */, data: AUDIO_TRACK_NUMBER },\n        { id: 131 /* TrackType */, data: AUDIO_TRACK_TYPE },\n        { id: 134 /* CodecID */, data: __privateGet(this, _options).audio.codec },\n        __privateGet(this, _audioCodecPrivate),\n        { id: 225 /* Audio */, data: [\n          { id: 181 /* SamplingFrequency */, data: new EBMLFloat32(__privateGet(this, _options).audio.sampleRate) },\n          { id: 159 /* Channels */, data: __privateGet(this, _options).audio.numberOfChannels },\n          __privateGet(this, _options).audio.bitDepth ? { id: 25188 /* BitDepth */, data: __privateGet(this, _options).audio.bitDepth } : null\n        ].filter(Boolean) }\n      ] });\n    }\n  };\n  _createSegment = new WeakSet();\n  createSegment_fn = function() {\n    let segment = { id: 408125543 /* Segment */, size: SEGMENT_SIZE_BYTES, data: [\n      __privateGet(this, _seekHead),\n      __privateGet(this, _segmentInfo),\n      __privateGet(this, _tracksElement)\n    ] };\n    __privateSet(this, _segment, segment);\n    __privateGet(this, _target).writeEBML(segment);\n  };\n  _createCues = new WeakSet();\n  createCues_fn = function() {\n    __privateSet(this, _cues, { id: 475249515 /* Cues */, data: [] });\n  };\n  _maybeFlushStreamingTarget = new WeakSet();\n  maybeFlushStreamingTarget_fn = function() {\n    if (__privateGet(this, _target) instanceof StreamingWriteTarget) {\n      __privateGet(this, _target).flush(false);\n    }\n  };\n  _segmentDataOffset = new WeakSet();\n  segmentDataOffset_get = function() {\n    return __privateGet(this, _target).dataOffsets.get(__privateGet(this, _segment));\n  };\n  _writeVideoDecoderConfig = new WeakSet();\n  writeVideoDecoderConfig_fn = function(meta) {\n    if (meta.decoderConfig) {\n      if (meta.decoderConfig.colorSpace) {\n        let colorSpace = meta.decoderConfig.colorSpace;\n        __privateSet(this, _colorSpace, colorSpace);\n        __privateGet(this, _colourElement).data = [\n          { id: 21937 /* MatrixCoefficients */, data: {\n            \"rgb\": 1,\n            \"bt709\": 1,\n            \"bt470bg\": 5,\n            \"smpte170m\": 6\n          }[colorSpace.matrix] },\n          { id: 21946 /* TransferCharacteristics */, data: {\n            \"bt709\": 1,\n            \"smpte170m\": 6,\n            \"iec61966-2-1\": 13\n          }[colorSpace.transfer] },\n          { id: 21947 /* Primaries */, data: {\n            \"bt709\": 1,\n            \"bt470bg\": 5,\n            \"smpte170m\": 6\n          }[colorSpace.primaries] },\n          { id: 21945 /* Range */, data: [1, 2][Number(colorSpace.fullRange)] }\n        ];\n        let endPos = __privateGet(this, _target).pos;\n        __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _colourElement)));\n        __privateGet(this, _target).writeEBML(__privateGet(this, _colourElement));\n        __privateGet(this, _target).seek(endPos);\n      }\n      if (meta.decoderConfig.description) {\n        __privateMethod(this, _writeCodecPrivate, writeCodecPrivate_fn).call(this, __privateGet(this, _videoCodecPrivate), meta.decoderConfig.description);\n      }\n    }\n  };\n  _fixVP9ColorSpace = new WeakSet();\n  fixVP9ColorSpace_fn = function(chunk) {\n    if (chunk.type !== \"key\")\n      return;\n    if (!__privateGet(this, _colorSpace))\n      return;\n    let i = 0;\n    if (readBits(chunk.data, 0, 2) !== 2)\n      return;\n    i += 2;\n    let profile = (readBits(chunk.data, i + 1, i + 2) << 1) + readBits(chunk.data, i + 0, i + 1);\n    i += 2;\n    if (profile === 3)\n      i++;\n    let showExistingFrame = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (showExistingFrame)\n      return;\n    let frameType = readBits(chunk.data, i + 0, i + 1);\n    i++;\n    if (frameType !== 0)\n      return;\n    i += 2;\n    let syncCode = readBits(chunk.data, i + 0, i + 24);\n    i += 24;\n    if (syncCode !== 4817730)\n      return;\n    if (profile >= 2)\n      i++;\n    let colorSpaceID = {\n      \"rgb\": 7,\n      \"bt709\": 2,\n      \"bt470bg\": 1,\n      \"smpte170m\": 3\n    }[__privateGet(this, _colorSpace).matrix];\n    writeBits(chunk.data, i + 0, i + 3, colorSpaceID);\n  };\n  _createInternalChunk = new WeakSet();\n  createInternalChunk_fn = function(data, type, timestamp, trackNumber) {\n    let internalChunk = {\n      data,\n      type,\n      timestamp,\n      trackNumber\n    };\n    return internalChunk;\n  };\n  _writeSimpleBlock = new WeakSet();\n  writeSimpleBlock_fn = function(chunk) {\n    let msTime = Math.floor(chunk.timestamp / 1e3);\n    let clusterIsTooLong = chunk.type !== \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= MAX_CHUNK_LENGTH_MS;\n    if (clusterIsTooLong) {\n      throw new Error(\n        `Current Matroska cluster exceeded its maximum allowed length of ${MAX_CHUNK_LENGTH_MS} milliseconds. In order to produce a correct WebM file, you must pass in a video key frame at least every ${MAX_CHUNK_LENGTH_MS} milliseconds.`\n      );\n    }\n    let shouldCreateNewClusterFromKeyFrame = (chunk.trackNumber === VIDEO_TRACK_NUMBER || !__privateGet(this, _options).video) && chunk.type === \"key\" && msTime - __privateGet(this, _currentClusterTimestamp) >= 1e3;\n    if (!__privateGet(this, _currentCluster) || shouldCreateNewClusterFromKeyFrame) {\n      __privateMethod(this, _createNewCluster, createNewCluster_fn).call(this, msTime);\n    }\n    let prelude = new Uint8Array(4);\n    let view = new DataView(prelude.buffer);\n    view.setUint8(0, 128 | chunk.trackNumber);\n    view.setUint16(1, msTime - __privateGet(this, _currentClusterTimestamp), false);\n    view.setUint8(3, Number(chunk.type === \"key\") << 7);\n    let simpleBlock = { id: 163 /* SimpleBlock */, data: [\n      prelude,\n      chunk.data\n    ] };\n    __privateGet(this, _target).writeEBML(simpleBlock);\n    __privateSet(this, _duration, Math.max(__privateGet(this, _duration), msTime));\n  };\n  _writeCodecPrivate = new WeakSet();\n  writeCodecPrivate_fn = function(element, data) {\n    let endPos = __privateGet(this, _target).pos;\n    __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(element));\n    element = [\n      { id: 25506 /* CodecPrivate */, size: 4, data: new Uint8Array(data) },\n      { id: 236 /* Void */, size: 4, data: new Uint8Array(CODEC_PRIVATE_MAX_SIZE - 2 - 4 - data.byteLength) }\n    ];\n    __privateGet(this, _target).writeEBML(element);\n    __privateGet(this, _target).seek(endPos);\n  };\n  _createNewCluster = new WeakSet();\n  createNewCluster_fn = function(timestamp) {\n    if (__privateGet(this, _currentCluster)) {\n      __privateMethod(this, _finalizeCurrentCluster, finalizeCurrentCluster_fn).call(this);\n    }\n    __privateSet(this, _currentCluster, { id: 524531317 /* Cluster */, size: CLUSTER_SIZE_BYTES, data: [\n      { id: 231 /* Timestamp */, data: timestamp }\n    ] });\n    __privateGet(this, _target).writeEBML(__privateGet(this, _currentCluster));\n    __privateSet(this, _currentClusterTimestamp, timestamp);\n    let clusterOffsetFromSegment = __privateGet(this, _target).offsets.get(__privateGet(this, _currentCluster)) - __privateGet(this, _segmentDataOffset, segmentDataOffset_get);\n    __privateGet(this, _cues).data.push({ id: 187 /* CuePoint */, data: [\n      { id: 179 /* CueTime */, data: timestamp },\n      { id: 183 /* CueTrackPositions */, data: [\n        { id: 247 /* CueTrack */, data: VIDEO_TRACK_NUMBER },\n        { id: 241 /* CueClusterPosition */, data: clusterOffsetFromSegment }\n      ] }\n    ] });\n  };\n  _finalizeCurrentCluster = new WeakSet();\n  finalizeCurrentCluster_fn = function() {\n    let clusterSize = __privateGet(this, _target).pos - __privateGet(this, _target).dataOffsets.get(__privateGet(this, _currentCluster));\n    let endPos = __privateGet(this, _target).pos;\n    __privateGet(this, _target).seek(__privateGet(this, _target).offsets.get(__privateGet(this, _currentCluster)) + 4);\n    __privateGet(this, _target).writeEBMLVarInt(clusterSize, CLUSTER_SIZE_BYTES);\n    __privateGet(this, _target).seek(endPos);\n  };\n  _ensureNotFinalized = new WeakSet();\n  ensureNotFinalized_fn = function() {\n    if (__privateGet(this, _finalized)) {\n      throw new Error(\"Cannot add new video or audio chunks after the file has been finalized.\");\n    }\n  };\n  var main_default = WebMMuxer;\n  var readBits = (bytes, start, end) => {\n    let result = 0;\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      let bit = (byte & 1 << bitIndex) >> bitIndex;\n      result <<= 1;\n      result |= bit;\n    }\n    return result;\n  };\n  var writeBits = (bytes, start, end, value) => {\n    for (let i = start; i < end; i++) {\n      let byteIndex = Math.floor(i / 8);\n      let byte = bytes[byteIndex];\n      let bitIndex = 7 - (i & 7);\n      byte &= ~(1 << bitIndex);\n      byte |= (value & 1 << end - i - 1) >> end - i - 1 << bitIndex;\n      bytes[byteIndex] = byte;\n    }\n  };\n  return __toCommonJS(main_exports);\n})();\nWebMMuxer = WebMMuxer.default;\nif (typeof module === \"object\" && typeof module.exports === \"object\") module.exports = WebMMuxer;\n"],"names":["LayerHost","props","className","layerHostId","react__WEBPACK_IMPORTED_MODULE_0__","useState","_Utilities__WEBPACK_IMPORTED_MODULE_1__","z","_a","id","hostId","layerHostRef","useRef","rootRef","notifyLayersChanged","useImperativeHandle","componentRef","current","useEffect","_Layer_notification__WEBPACK_IMPORTED_MODULE_2__","_Y","EQ","_fluentui_react_hooks__WEBPACK_IMPORTED_MODULE_3__","k","nw","createElement","tslib__WEBPACK_IMPORTED_MODULE_4__","pi","_Utilities__WEBPACK_IMPORTED_MODULE_5__","i","ref","_helper","_helperView","_writeFloat32","writeFloat32_fn","_writeFloat64","writeFloat64_fn","_writeUnsignedInt","writeUnsignedInt_fn","_writeString","writeString_fn","_buffer","_bytes","_stream","_chunks","_sections","_onFlush","_target","_options","_segment","_segmentInfo","_seekHead","_tracksElement","_segmentDuration","_colourElement","_videoCodecPrivate","_audioCodecPrivate","_cues","_currentCluster","_currentClusterTimestamp","_duration","_videoChunkQueue","_audioChunkQueue","_lastVideoTimestamp","_lastAudioTimestamp","_colorSpace","_finalized","_validateOptions","validateOptions_fn","_createFileHeader","createFileHeader_fn","_writeEBMLHeader","writeEBMLHeader_fn","_createSeekHead","createSeekHead_fn","_createSegmentInfo","createSegmentInfo_fn","_createTracks","createTracks_fn","_createSegment","createSegment_fn","_createCues","createCues_fn","_maybeFlushStreamingTarget","maybeFlushStreamingTarget_fn","_segmentDataOffset","segmentDataOffset_get","_writeVideoDecoderConfig","writeVideoDecoderConfig_fn","_fixVP9ColorSpace","fixVP9ColorSpace_fn","_createInternalChunk","createInternalChunk_fn","_writeSimpleBlock","writeSimpleBlock_fn","_writeCodecPrivate","writeCodecPrivate_fn","_createNewCluster","createNewCluster_fn","_finalizeCurrentCluster","finalizeCurrentCluster_fn","_ensureNotFinalized","ensureNotFinalized_fn","__defProp","__getOwnPropDesc","__getOwnPropNames","__hasOwnProp","__pow","__accessCheck","__privateGet","__privateAdd","__privateSet","__privateMethod","main_exports","EBMLFloat32","EBMLFloat64","measureUnsignedInt","measureEBMLVarInt","WriteTarget","ArrayBufferWriteTarget","FILE_CHUNK_SIZE","FileSystemWritableFileStreamWriteTarget","insertSectionIntoFileChunk","StreamingWriteTarget","MAX_CHUNK_LENGTH_MS","CODEC_PRIVATE_MAX_SIZE","APP_NAME","WebMMuxer","main_default","readBits","writeBits","Object","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","prototype","hasOwnProperty","Math","pow","obj","member","msg","has","TypeError","getter","call","get","value","WeakSet","add","set","setter","method","__export","target","all","name","enumerable","default","constructor","pos","Uint8Array","DataView","buffer","offsets","WeakMap","dataOffsets","writeEBMLVarInt","width","setUint8","write","subarray","writeEBML","data","_b","Array","isArray","elem","sizePos","sizeSize","size","seek","startPos","endPos","length","byteLength","setFloat32","setFloat64","str","split","map","x","charCodeAt","ArrayBuffer","ensureSize","newLength","newBuffer","newBytes","newPos","finalize","slice","stream","writeDataIntoChunks","flushChunks","position","chunkIndex","findIndex","start","createChunk","chunk","relativePosition","toWrite","min","end","written","shouldFlush","includesPosition","floor","push","sort","a","b","indexOf","force","section","type","splice","low","high","index","mid","max","onFlush","flush","done","chunks","sorted","lastChunk","isLastFlush","options","FileSystemWritableFileStream","addVideoChunk","meta","timestamp","copyTo","addVideoChunkRaw","video","internalChunk","codec","audioChunk","shift","audio","addAudioChunk","addAudioChunkRaw","videoChunk","decoderConfig","description","segmentSize","ebmlHeader","kaxCues","kaxInfo","kaxTracks","segmentDuration","tracksElement","colourElement","frameRate","height","filter","Boolean","sampleRate","numberOfChannels","bitDepth","segment","colorSpace","matrix","transfer","primaries","Number","fullRange","profile","showExistingFrame","frameType","syncCode","colorSpaceID","trackNumber","msTime","shouldCreateNewClusterFromKeyFrame","prelude","view","setUint16","simpleBlock","element","clusterOffsetFromSegment","clusterSize","bytes","result","byte","bitIndex","byteIndex","__copyProps","to","from","except","desc","key","module","exports"],"sourceRoot":""}